ARG PYTHON_VERSION=3.10-slim
FROM --platform=${TARGETPLATFORM:-linux/amd64} ghcr.io/openfaas/classic-watchdog:0.3.1 AS watchdog
FROM --platform=${TARGETPLATFORM:-linux/amd64} python:${PYTHON_VERSION}

ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Allows you to add additional packages via build-arg
ARG ADDITIONAL_PACKAGE=libgl1-mesa-glx

COPY --from=watchdog /fwatchdog /usr/bin/fwatchdog
RUN chmod +x /usr/bin/fwatchdog
RUN apt-get update \
    && apt-get install -y ca-certificates curl libglib2.0-0 libgl1-mesa-glx ${ADDITIONAL_PACKAGE} \
    && rm -rf /var/lib/apt/lists/


# Add non root user
RUN groupadd app && useradd -r -g app app

WORKDIR /home/app/

COPY index.py           .
COPY requirements.txt   .

RUN chown -R app /home/app && \
    mkdir -p /home/app/python && chown -R app /home/app
USER app

# Variáveis de ambiente
ENV PATH=$PATH:/home/app/.local/bin:/home/app/python/bin/
ENV PYTHONPATH=$PYTHONPATH:/home/app/python
ENV TMPDIR=/home/app/tmp
# Set Ultralytics config directory to avoid home permission issues
ENV YOLO_CONFIG_DIR=/home/app/tmp/Ultralytics

# Optional: suppress verbose logs
ENV YOLO_VERBOSE=False

# Diretórios essenciais
RUN mkdir -p /home/app/tmp \
    && mkdir -p /home/app/python \
    && mkdir -p /home/app/function \
    && touch /home/app/function/__init__.py

# Copia os requirements antes (pra cache funcionar se nada mudar)
COPY function/requirements.txt /home/app/function/

# Define o diretório de trabalho
WORKDIR /home/app/function/

# Instala pacotes direto na pasta alvo pra economizar espaço
# Junta todos os pip em um único comando (mais rápido e menos camadas)
RUN pip install --no-cache-dir --target=/home/app/python \
    absl-py==2.2.2 \
    ai-edge-litert==1.2.0 \
    astunparse==1.6.3 \
    coloredlogs==15.0.1 \
    flatbuffers==25.2.10 \
    gast==0.6.0 \
    google-pasta==0.2.0 \
    grpcio==1.71.0 \
    h5py==3.13.0 \
    humanfriendly==10.0 \
    keras==3.9.2 \
    libclang==18.1.1 \
    Markdown==3.8 \
    markdown-it-py==3.0.0 \
    matplotlib==3.10.1 \
    mdurl==0.1.2 \
    ml_dtypes==0.5.1 \
    mpmath==1.3.0 \
    namex==0.0.9 \
    numpy==1.26.4 \
    nvidia-cublas-cu12==12.6.4.1 \
    nvidia-cuda-cupti-cu12==12.6.80 \
    nvidia-cuda-nvrtc-cu12==12.6.77 \
    nvidia-cuda-runtime-cu12==12.6.77 \
    nvidia-cudnn-cu12==9.5.1.17 \
    nvidia-cufft-cu12==11.3.0.4 \
    nvidia-cufile-cu12==1.11.1.6 \
    nvidia-curand-cu12==10.3.7.77 \
    nvidia-cusolver-cu12==11.7.1.2 \
    nvidia-cusparse-cu12==12.5.4.2 \
    nvidia-cusparselt-cu12==0.6.3 \
    nvidia-nccl-cu12==2.26.2 \
    nvidia-nvjitlink-cu12==12.6.85 \
    nvidia-nvtx-cu12==12.6.77 \
    onnx==1.17.0 \
    onnx-tf==1.10.0 \
    onnx2tf==1.27.2 \
    onnx_graphsurgeon==0.5.8 \
    onnxruntime==1.21.1 \
    onnxslim==0.1.50 \
    opencv-python==4.11.0.86 \
    opt_einsum==3.4.0 \
    optree==0.15.0 \
    pandas==2.2.3 \
    pickles==0.1.1 \
    pillow==11.2.1 \
    protobuf==5.29.4 \
    Pygments==2.19.1 \
    PyYAML==6.0.2 \
    requests==2.32.3 \
    rich==14.0.0 \
    scipy==1.15.2 \
    seaborn==0.13.2 \
    sng4onnx==1.0.4 \
    sympy==1.14.0 \
    tensorboard==2.19.0 \
    tensorboard-data-server==0.7.2 \
    tensorflow==2.19.0 \
    tensorflow-addons==0.23.0 \
    tensorflow-io-gcs-filesystem==0.37.1 \
    termcolor==3.1.0 \
    tf_keras==2.19.0 \
    tflite==2.18.0 \
    tflite-runtime==2.14.0 \
    torchvision==0.22.0 \
    triton==3.3.0 \
    typeguard==2.13.3 \
    ultralytics==8.3.122 \
    Werkzeug==3.1.3 \
    wrapt==1.17.2



WORKDIR /home/app/function/
COPY function/requirements.txt	.
#yolo
RUN curl -L -o /home/app/function/yolov8n.pt https://github.com/ultralytics/assets/releases/download/v8.3.0/yolov8n.pt
RUN yolo export model=yolov8n.pt format=tflite


	
WORKDIR /home/app/

USER root

COPY function           function

# Allow any user-id for OpenShift users.
RUN chown -R app:app ./ && \
    chmod -R 777 /home/app/python

USER app

ENV fprocess="python3 index.py"
EXPOSE 8080 

HEALTHCHECK --interval=3s CMD [ -e /tmp/.lock ] || exit 1

CMD ["fwatchdog"]
